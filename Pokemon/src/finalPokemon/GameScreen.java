/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finalPokemon;

import static finalPokemon.StartMenu.bulbasaurIsActive;
import static finalPokemon.StartMenu.charmanderIsActive;
import static finalPokemon.StartMenu.squirtleIsActive;
import finalPokemon.pokemon.Bulbasaur;
import finalPokemon.pokemon.Charmander;
import finalPokemon.pokemon.Cyndaquil;
import finalPokemon.pokemon.Garchomp;
import finalPokemon.pokemon.Herdier;
import finalPokemon.pokemon.Pokemon;
import finalPokemon.pokemon.Properties;
import javax.swing.JFrame;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import finalPokemon.pokemon.Squirtle;
import finalPokemon.pokemon.Weedle;
import javax.swing.JOptionPane;

/**
 *
 * @author l.mccausland
 */
public class GameScreen extends JFrame {

    private Bulbasaur bulbasaur;
    private Charmander charmander;
    private Squirtle squirtle;

    public boolean ch;
    public boolean bu;
    public boolean sq;

    public Pokemon currentEnemy;
    public Pokemon friendly;
    public int enemyHp;
    public int lastLevel;
    public double friendlyHp;

    /**
     * Creates new form GameScreen
     */
    public GameScreen(boolean ch, boolean bu, boolean sq) {
        this.ch = ch;
        this.bu = bu;
        this.sq = sq;

        initComponents();
        setFrame();
        setText();
        level(random(1, 4));
        initialize(charmanderIsActive, bulbasaurIsActive, squirtleIsActive);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        enemy = new javax.swing.JLabel();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        button4 = new java.awt.Button();
        output = new javax.swing.JLabel();
        enemyHealth = new javax.swing.JLabel();
        friendlyHealth = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(77, 141, 231, 204);

        enemy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(enemy);
        enemy.setBounds(705, 141, 231, 204);

        button1.setLabel("button1");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        getContentPane().add(button1);
        button1.setBounds(101, 459, 353, 129);

        button2.setLabel("button1");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        getContentPane().add(button2);
        button2.setBounds(101, 609, 353, 129);

        button3.setLabel("button1");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        getContentPane().add(button3);
        button3.setBounds(482, 609, 353, 129);

        button4.setLabel("button1");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });
        getContentPane().add(button4);
        button4.setBounds(482, 459, 353, 129);

        output.setText("A wild name has appeard!");
        getContentPane().add(output);
        output.setBounds(400, 220, 570, 100);

        enemyHealth.setText("health");
        getContentPane().add(enemyHealth);
        enemyHealth.setBounds(800, 370, 100, 16);

        friendlyHealth.setText("heatlh");
        getContentPane().add(friendlyHealth);
        friendlyHealth.setBounds(170, 370, 150, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        chooseMove(1);
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        chooseMove(2);
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        chooseMove(3);
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        chooseMove(4);
    }//GEN-LAST:event_button4ActionPerformed

    private void setFrame() {
        this.setTitle("Pokemon");
        this.setSize(1000, 800);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    private void initialize(boolean ch, boolean bu, boolean sq) {
        if (bu) {
            bulbasaur = new Bulbasaur(jLabel1);
        } else if (ch) {
            charmander = new Charmander(jLabel1);
        } else if (sq) {
            squirtle = new Squirtle(jLabel1);
        }

        friendlyHp = getFriendly().hp;
        friendlyHealth.setText(getFriendly().hp + "/" + getFriendly().hp);
        button1.setLabel((String) getFriendly().attackNames.get(0));
        button2.setLabel((String) getFriendly().attackNames.get(1));
        button3.setLabel((String) getFriendly().attackNames.get(2));
        button4.setLabel((String) getFriendly().attackNames.get(3));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private javax.swing.JLabel enemy;
    private javax.swing.JLabel enemyHealth;
    private javax.swing.JLabel friendlyHealth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel output;
    // End of variables declaration//GEN-END:variables

    private void level(int lvlNum) {
        
        if (lvlNum != lastLevel) {

            switch (lvlNum) {
                case 1:
                    Cyndaquil cyndaquil = new Cyndaquil(enemy);
                    currentEnemy = cyndaquil;
                    enemy();
                    break;
                case 2:
                    Weedle weedle = new Weedle(enemy);
                    currentEnemy = weedle;
                    enemy();
                    break;
                case 3:
                    Herdier herdier = new Herdier(enemy);
                    currentEnemy = herdier;
                    enemy();
                    break;
                case 4:
                    Garchomp garchomp = new Garchomp(enemy);
                    currentEnemy = garchomp;
                    enemy();
                    break;
                case 5:
                    break;
                default:
                    break;
            }
        }
        else{
        level(random(1,4));
        }
        lastLevel = lvlNum;
    }

    private void setText() {
        enemy.setVisible(true);
        enemy.setOpaque(true);
    }

    /**
     * makes a random number between the high, low and size variables
     *
     * @param low
     * @param high
     * @return
     */
    private static int random(int low, int high) {
        double seed = Math.random();
        double L = (double) low;
        double H = (double) high;
        double value = (H - L + 1) * seed + L;
        int answer = (int) value;
        return answer;

    }

    protected void enemyTurn() {
        int index = getEnemy().attackNames.indexOf(getEnemy().getAttack(random(1, 4)));
        double value = (double) getEnemy().attackValues.get(index);
        String attackName = (String) getEnemy().attackNames.get(index);
        double dmg = getEnemy().damage(getEnemy(), value);
        friendlyHp -= dmg;
        friendlyHealth.setText((int) friendlyHp + "/" + (int) getFriendly().hp);
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        if (friendlyHp <= 0) {
            friendlyHp = 0;
            output.setText(getEnemy().name + " used " + attackName + " and did " + dmg + " damage!");
            this.dispose();
            JOptionPane.showMessageDialog(null, "Your " + getFriendly().name + " fainted :(\nReturning to menu...", Properties.TITLE, JOptionPane.PLAIN_MESSAGE);
            StartMenu menu = new StartMenu();
        } else {
            output.setText(getEnemy().name + " used " + attackName + " and did " + dmg + " damage!");
        }

    }

    private void chooseMove(int button) {
        friendlyAttack(button);
        if (enemyHp <= 0) {
            output.setText(currentEnemy.name + " has fainted!");
            level(random(1, 3));
        }

        //Delay
        enemyTurn();
    }

    private Pokemon getEnemy() {
        return currentEnemy;
    }

    private Pokemon getFriendly() {
        if (bu) {
            friendly = bulbasaur;
        } else if (ch) {
            friendly = charmander;

        } else if (sq) {
            friendly = squirtle;
        }

        return friendly;
    }

    private void friendlyAttack(int button) {
        int index = getFriendly().attackNames.indexOf(getFriendly().getAttack(button));
        double value = (double) getFriendly().attackValues.get(index);
        double dmg = getFriendly().damage(getFriendly(), value);
        enemyHp -= dmg;
        enemyHealth.setText(enemyHp + "/" + getEnemy().hp);
        output(button, dmg);
        button1.setEnabled(false);
        button2.setEnabled(false);
        button3.setEnabled(false);
        button4.setEnabled(false);
    }

    private void output(int button, double dmg) {
        output.setText(getFriendly().name + " used " + getFriendly().getAttack(button) + " and did " + (int) dmg + " damage!");
    }

    private void enemy() {
        output.setText("A wild " + getEnemy().name + " has appeared!");
        currentEnemy = getEnemy();
        enemyHp = getEnemy().hp;

        //Enemy health text
        enemyHealth.setOpaque(true);
        enemyHealth.setVisible(true);
        enemyHealth.setText(enemyHp + "/" + getEnemy().hp);
        add(enemyHealth);
    }
}
